package compiler

import (
	"CuteASM/arch/types"
	"CuteASM/arch/x86"
	"CuteASM/parser"
	"fmt"
	"runtime"
	"strings"
	"time"
)

type Compiler struct {
	Arch  *types.Architecture
	count int
	Code  string
}

func NewCompiler(archType string) *Compiler {
	// 根据架构类型创建对应的编译器实例
	var archImpl *types.Architecture = x86.New()
	code := fmt.Sprintf("; ==============================\n; Assembly Code Generated By CuteASM\n; Time: %s\n; Architecture: %s\n; OS: %s\n; ==============================\n\n", time.Now().Format(time.DateTime), archType, runtime.GOOS)
	return &Compiler{Arch: archImpl, Code: code}
}

func (c *Compiler) Compile(node *parser.Node) string {
	for i := 0; i < len(node.Children); i++ {
		n := node.Children[i]
		switch n.Value.(type) {
		case *parser.SECTION:
			c.count = 0
			section := n.Value.(*parser.SECTION)
			c.Code += c.format("section " + section.Name + "; " + section.Desc)
			c.Compile(n)
		case *parser.LabelBlock:
			label := n.Value.(*parser.LabelBlock)
			if label.IsFunc {
				c.Code += c.format("; ==============================\n; Function:" + label.Name)
			}
			c.Code += c.format(label.Name + ":")
			c.count++
			if label.IsFunc {
				// 使用架构特定的函数序言
				//prologue := c.Arch.Prologue(label.Name, label.StackRoom)
				/*for _, line := range prologue {
					c.Code += c.format(line)
				}*/
			}
			c.Compile(n)
			c.count--
			if label.IsFunc {
				c.Code += c.format("\n; Function End:" + label.Name + "\n; ==============================\n")
			}
		case *parser.Instruction:
			instruction := n.Value.(*parser.Instruction)
			tmp := instruction.Instruction
			if len(instruction.Args) > 0 {
				tmp += " "
			}
			for i := 0; i < len(instruction.Args); i++ {
				//tmp += c.Arch.ParseValue(instruction.Args[i]) + ", " // 传入架构信息
			}
			if len(instruction.Args) > 0 {
				tmp = tmp[:len(tmp)-2]
			}
			//c.Code += c.format(tmp)
		}
	}
	return c.Code
}

func (c *Compiler) format(text string) string {
	return strings.Repeat("    ", c.count) + text + "\n"
}
